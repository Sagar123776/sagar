import tkinter as tk
from tkinter import ttk, messagebox
import random
import string



class PasswordGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Advanced Password Generator")
        self.root.geometry("470x420")
        
        self.password_var = tk.StringVar()
        self.length_var = tk.IntVar(value=12)
        self.strength_var = tk.StringVar(value="Strength: -")
        self.copy_label_var = tk.StringVar(value="")

        self.upper_var = tk.BooleanVar(value=True)
        self.lower_var = tk.BooleanVar(value=True)
        self.digits_var = tk.BooleanVar(value=True)
        self.symbols_var = tk.BooleanVar(value=True)
        self.exclude_similar_var = tk.BooleanVar(value=True)
        self.exclude_ambiguous_var = tk.BooleanVar(value=False)
        
        self.create_widgets()

    def create_widgets(self):
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        length_frame = ttk.Frame(main_frame)
        length_frame.pack(fill=tk.X, pady=5)

        ttk.Label(length_frame, text="Password Length:").pack(side=tk.LEFT)
        ttk.Scale(length_frame, from_=6, to=32, variable=self.length_var,
                  command=lambda _: self.update_strength()).pack(side=tk.LEFT, padx=10, fill=tk.X, expand=True)

        self.length_display = ttk.Label(length_frame, text=str(self.length_var.get()), font=('Segoe UI', 10, 'bold'))
        self.length_display.pack(side=tk.LEFT)
        self.length_var.trace_add("write", lambda *_: self.length_display.config(text=str(self.length_var.get())))

        options_frame = ttk.LabelFrame(main_frame, text="Character Types", padding=10)
        options_frame.pack(fill=tk.X, pady=10)
        
        ttk.Checkbutton(options_frame, text="Uppercase (A-Z)", variable=self.upper_var,
                        command=self.update_strength).pack(anchor=tk.W)
        ttk.Checkbutton(options_frame, text="Lowercase (a-z)", variable=self.lower_var,
                        command=self.update_strength).pack(anchor=tk.W)
        ttk.Checkbutton(options_frame, text="Digits (0-9)", variable=self.digits_var,
                        command=self.update_strength).pack(anchor=tk.W)
        ttk.Checkbutton(options_frame, text="Symbols (!@#)", variable=self.symbols_var,
                        command=self.update_strength).pack(anchor=tk.W)
        
        advanced_frame = ttk.LabelFrame(main_frame, text="Advanced Options", padding=10)
        advanced_frame.pack(fill=tk.X, pady=5)
        
        ttk.Checkbutton(advanced_frame, text="Exclude similar characters (i, l, 1, etc.)",
                        variable=self.exclude_similar_var).pack(anchor=tk.W)
        ttk.Checkbutton(advanced_frame, text="Exclude ambiguous symbols ({ } [ ] etc.)",
                        variable=self.exclude_ambiguous_var).pack(anchor=tk.W)
        
        strength_frame = ttk.Frame(main_frame)
        strength_frame.pack(fill=tk.X, pady=5)
        
        self.strength_bar = ttk.Progressbar(strength_frame, orient=tk.HORIZONTAL, length=200, mode='determinate')
        self.strength_bar.pack(side=tk.LEFT, padx=5)
        self.strength_label = ttk.Label(strength_frame, textvariable=self.strength_var, font=('Segoe UI', 10, 'bold'))
        self.strength_label.pack(side=tk.LEFT)

        ttk.Button(main_frame, text="üîê Generate Password", command=self.generate_password).pack(pady=10)
        
        password_frame = ttk.Frame(main_frame)
        password_frame.pack(fill=tk.X, pady=5)

        self.password_entry = tk.Entry(password_frame, textvariable=self.password_var, font=('Courier New', 12),
                                       bg="#f0f0ff", relief="sunken", state="readonly")
        self.password_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)

        ttk.Button(password_frame, text="üìã Copy", command=self.copy_to_clipboard).pack(side=tk.LEFT)
        self.copy_label = ttk.Label(main_frame, textvariable=self.copy_label_var, foreground="green", font=("Segoe UI", 9))
        self.copy_label.pack()

    def generate_password(self):
        if not any([self.upper_var.get(), self.lower_var.get(),
                    self.digits_var.get(), self.symbols_var.get()]):
            messagebox.showerror("Error", "Please select at least one character type")
            return

        chars = []
        if self.upper_var.get():
            chars.extend(string.ascii_uppercase)
        if self.lower_var.get():
            chars.extend(string.ascii_lowercase)
        if self.digits_var.get():
            chars.extend(string.digits)
        if self.symbols_var.get():
            chars.extend(string.punctuation)

        if self.exclude_similar_var.get():
            similar = "il1Lo0O"
            chars = [c for c in chars if c not in similar]

        if self.exclude_ambiguous_var.get():
            ambiguous = r'{}[]()/\'"`~,;:.<>'
            chars = [c for c in chars if c not in ambiguous]

        length = self.length_var.get()
        password = []

        if self.upper_var.get():
            password.append(random.choice(string.ascii_uppercase))
        if self.lower_var.get():
            password.append(random.choice(string.ascii_lowercase))
        if self.digits_var.get():
            password.append(random.choice(string.digits))
        if self.symbols_var.get():
            password.append(random.choice(string.punctuation))

        if len(chars) == 0:
            messagebox.showerror("Error", "Character pool is empty. Adjust your settings.")
            return

        password.extend(random.choices(chars, k=length - len(password)))
        random.shuffle(password)
        self.password_var.set(''.join(password))
        self.update_strength()

    def update_strength(self):
        length = self.length_var.get()
        char_types = sum([self.upper_var.get(), self.lower_var.get(),
                          self.digits_var.get(), self.symbols_var.get()])

        strength = min(100, (length * 3) + (char_types * 10))
        self.strength_bar['value'] = strength

        if strength < 40:
            level = "Weak üî¥"
        elif strength < 70:
            level = "Medium üü†"
        else:
            level = "Strong üü¢"

        self.strength_var.set(f"Strength: {level}")

    def copy_to_clipboard(self):
        password = self.password_var.get()
        if password:
            pyperclip.copy(password)
            self.copy_label_var.set("‚úî Copied to clipboard!")
            self.root.after(2000, lambda: self.copy_label_var.set(""))
        else:
            messagebox.showwarning("Warning", "No password generated yet")


if __name__ == "__main__":
    root = tk.Tk()
    app = PasswordGeneratorApp(root)
    root.mainloop()
